module OperacoesLogicas (
    input [7:0] instruction,
    input [7:0] data_in1, data_in2,  // Dados de entrada
    output reg [7:0] R1, R2, flags, PC  // Registradores de saída
);

    // Flags
    parameter ZF = 0, SF = 1, OF = 2, CF = 3, PF = 4; // Posicionamento das flags (0 a 4)

    // Registradores internos
    initial begin
        R1 = 8'b0; // Inicializa R1
        R2 = 8'b0; // Inicializa R2
        flags = 8'b0; // Inicializa flags
        PC = 8'b0; // Inicializa o PC
    end

    // Instruções de movimentação e operações lógicas
    always @(instruction or data_in1 or data_in2) begin
        case (instruction)
            // CMP - Comparação
            8'b00000100: begin
                // Zero Flag
                flags[ZF] = (data_in1 == data_in2) ? 1'b1 : 1'b0; 
                // Sign Flag
                flags[SF] = (data_in1 < data_in2) ? 1'b1 : 1'b0;
                // Overflow e Carry Flags (não implementadas para CMP simples)
                flags[OF] = 1'b0; 
                flags[CF] = 1'b0; 
            end

            // Operação E (AND)
            8'b00000001: begin
                R1 = data_in1 & data_in2; // Resultado da operação E (AND)
            end

            // Operação Ou (OR)
            8'b00000010: begin
                R1 = data_in1 | data_in2; // Resultado da operação Ou (OR)
            end

            // Operação Negação (NOT)
            8'b00000011: begin
                R1 = ~data_in1; // Resultado da operação Negação (NOT)
            end

            // Operação Ou-Exclusivo (XOR)
            8'b00000101: begin
                R1 = data_in1 ^ data_in2; // Resultado da operação Ou-Exclusivo (XOR)
            end

            // Outras instruções
            default: begin
                // Nenhuma ação para outras instruções
            end
        endcase
    end

endmodule
